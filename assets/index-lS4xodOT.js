(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const a of n.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function t(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(i){if(i.ep)return;i.ep=!0;const n=t(i);fetch(i.href,n)}})();class y{constructor(){this.port=null,this.reader=null,this.writer=null,this.isConnected=!1,this.cellNum=1,this.readings=[],this.currentReadings=[],this.stableCount=0,this.prevResistance=null,this.prevVoltage=null,this.prevRUnit=null,this.requiredStable=10,this.epsilonResistance=.002,this.epsilonVoltage=.01,this.isReadingInProgress=!1,this.lastReadingTime=0,this.COOLDOWN_PERIOD=3e3,this.noSignalTimeout=null,this.waitingForProbeRemoval=!1,this.PROBE_REMOVAL_THRESHOLD=.1,this.readingLocked=!1,this.messageBuffer=new Uint8Array(0),this.connectButton=document.getElementById("connectButton"),this.statusText=document.getElementById("statusText"),this.cellTypeInput=document.getElementById("cellType"),this.customCellTypeInput=document.getElementById("customCellType"),this.averagingCheckbox=document.getElementById("averaging"),this.enableSoundCheckbox=document.getElementById("enableSound"),this.numReadingsInput=document.getElementById("numReadings"),this.cellNumberSpan=document.getElementById("cellNumber"),this.voltageSpan=document.getElementById("voltage"),this.resistanceSpan=document.getElementById("resistance"),this.stabilityText=document.getElementById("stabilityText"),this.stabilityProgress=document.getElementById("stabilityProgress").querySelector(".progress"),this.readingsLog=document.getElementById("readingsLog"),this.exportButton=document.getElementById("exportButton"),this.clearButton=document.getElementById("clearButton"),this.readingCounterSpan=document.createElement("div"),this.readingCounterSpan.className="text-sm text-gray-600 dark:text-gray-400 mt-2",this.stabilityText.parentNode.insertBefore(this.readingCounterSpan,this.stabilityText.nextSibling),this.readingNumberSpan=document.getElementById("readingNumber"),this.readingsLogTitle=document.getElementById("readingsLogTitle"),this.currentMeasurementsPanel=document.getElementById("currentMeasurementsPanel"),this.measurementsContainer=document.getElementById("measurementsContainer"),this.updateReadingsLogTitle(),this.cellTypeInput.addEventListener("change",()=>{const e=this.cellTypeInput.value==="custom";this.customCellTypeInput.classList.toggle("hidden",!e),e&&this.customCellTypeInput.focus()}),this.cellTypeInput.addEventListener("change",()=>this.updateReadingsLogTitle()),this.customCellTypeInput.addEventListener("input",()=>{this.cellTypeInput.value==="custom"&&this.updateReadingsLogTitle()}),this.initializeEventListeners(),this.progressBar=document.querySelector("#stabilityProgress .progress"),this.progressBar.classList.add("waiting"),this.stabilityText.textContent="Waiting for connection",this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent="-/-",this.updateStabilityUI(0),this.updateReadingsLogTitle()}initializeEventListeners(){this.connectButton.addEventListener("click",()=>this.toggleConnection()),this.exportButton.addEventListener("click",()=>this.exportToCSV()),this.clearButton.addEventListener("click",()=>this.clearLog())}playBeep(){if(this.enableSoundCheckbox.checked)try{const e=new(window.AudioContext||window.webkitAudioContext),t=e.createOscillator(),s=e.createGain();t.connect(s),s.connect(e.destination),t.frequency.value=800,t.type="sine",s.gain.setValueAtTime(.15,e.currentTime),s.gain.exponentialRampToValueAtTime(.01,e.currentTime+.15),t.start(e.currentTime),t.stop(e.currentTime+.15)}catch(e){console.log("Audio not available:",e)}}async toggleConnection(){this.isConnected?await this.disconnect():await this.connect()}async connect(){try{this.port=await navigator.serial.requestPort(),await this.port.open({baudRate:115200}),this.reader=this.port.readable.getReader(),this.isConnected=!0,this.updateUI("connected"),this.stabilityText.textContent="Waiting for stable reading...",this.startReading()}catch(e){console.error("Connection error:",e),this.updateUI("error","Failed to connect to device")}}async disconnect(){this.reader&&(await this.reader.cancel(),await this.reader.releaseLock()),this.port&&await this.port.close(),this.isConnected=!1,this.updateUI("disconnected"),this.stabilityText.textContent="Idle",this.readingNumberSpan.textContent="-"}async startReading(){for(;;)try{const{value:e,done:t}=await this.reader.read();if(t)break;e&&this.appendToBuffer(e)}catch(e){console.error("Read error:",e),this.updateUI("error","Connection lost");break}}appendToBuffer(e){const t=new Uint8Array(this.messageBuffer.length+e.length);for(t.set(this.messageBuffer,0),t.set(e,this.messageBuffer.length),this.messageBuffer=t;this.messageBuffer.length>=10;){const s=this.messageBuffer.slice(0,10);this.processPacket(s),this.messageBuffer=this.messageBuffer.slice(10)}}processPacket(e){if(e.length!==10)return;const[t,s,i,n,a,r,u,m,d,c]=e,g=(t&240)>>4;let l=(i&255|(n&255)<<8|(a&255)<<16)/1e4,o="mΩ";g===5?o="mΩ":g===6?(o="mΩ",l="OL"):g===9?o="Ω":g===10&&(o="Ω",l="OL");const h=t&15;let p=(m&255|(d&255)<<8|(c&255)<<16)/1e4;p=(r===1?1:-1)*p,h===8&&(p="OL"),this.updateReadings(p,l,o)}processData(e){if(!e||e.length<10)return;const t=e.slice(0,10),[s,i,n,a,r,u,m,d,c,g]=t,l=(s&240)>>4;let o=(n&255|(a&255)<<8|(r&255)<<16)/1e4,h="mΩ";l===5?h="mΩ":l===6?(h="mΩ",o="OL"):l===9?h="Ω":l===10&&(h="Ω",o="OL");const p=s&15;let x=(d&255|(c&255)<<8|(g&255)<<16)/1e4;x=(u===1?1:-1)*x,p===8&&(x="OL"),this.updateReadings(x,o,h),e.length>10&&this.processData(e.slice(10))}updateReadings(e,t,s){this.updateCurrentValues(e,t,s);const i=Date.now(),n=typeof e=="number"&&typeof t=="number"&&e>0;if(this.noSignalTimeout&&clearTimeout(this.noSignalTimeout),this.waitingForProbeRemoval&&(!n||typeof e=="number"&&e<this.PROBE_REMOVAL_THRESHOLD)){this.waitingForProbeRemoval=!1,this.isReadingInProgress=!1,this.stableCount=0,this.updateStabilityUI(0),this.currentReadings.length<(this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1)&&(this.stabilityText.textContent="Ready for next reading");return}if(this.noSignalTimeout=setTimeout(()=>{!n&&!this.waitingForProbeRemoval&&(this.stableCount=0,this.updateStabilityUI(0),this.waitingForProbeRemoval||(this.stabilityText.textContent="Waiting for stable reading..."))},1e3),!n){!this.waitingForProbeRemoval&&this.isReadingInProgress&&(this.stableCount=0,this.updateStabilityUI(0),this.stabilityText.textContent="Invalid reading");return}if(this.waitingForProbeRemoval){this.stabilityText.textContent="Remove probes before next reading";return}if(!this.isReadingInProgress&&i-this.lastReadingTime<this.COOLDOWN_PERIOD){this.stabilityText.textContent="Please wait before next reading...";return}this.isReadingInProgress||(this.isReadingInProgress=!0,this.stableCount=0,this.prevVoltage=null,this.prevResistance=null,this.updateStabilityUI(0),this.currentReadings.length===0&&this.updateMeasurementsDisplay()),this.checkStability(e,t,s)?(this.stableCount++,this.updateStabilityUI(this.stableCount/this.requiredStable),this.stableCount===this.requiredStable&&(this.recordReading(e,t,s),this.lastReadingTime=i)):this.waitingForProbeRemoval||(this.stableCount=0,this.updateStabilityUI(0))}checkStability(e,t,s){if(typeof e!="number"||typeof t!="number")return!1;if(this.prevVoltage===null||this.prevResistance===null)return this.prevVoltage=e,this.prevResistance=t,this.prevRUnit=s,!1;const i=Math.abs(e-this.prevVoltage)<this.epsilonVoltage,n=Math.abs(t-this.prevResistance)<this.epsilonResistance,a=s===this.prevRUnit;return this.prevVoltage=e,this.prevResistance=t,this.prevRUnit=s,i&&n&&a}recordReading(e,t,s){if(typeof e!="number"||typeof t!="number")return;const i=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;this.currentReadings.push({voltage:e,resistance:t,rUnit:s});const n=this.currentReadings.length;if(this.readingCounterSpan.textContent=`Reading ${n} of ${i}`,this.stabilityText.textContent=n===i?"Final reading captured":"Reading captured",this.updateMeasurementsDisplay(),this.playBeep(),this.waitingForProbeRemoval=!0,n===i){const a=this.currentReadings.reduce((d,c)=>d+c.voltage,0)/i,r=this.currentReadings.reduce((d,c)=>d+c.resistance,0)/i;let u=this.cellTypeInput.value;u==="custom"&&(u=this.customCellTypeInput.value.trim()||"Custom");const m={cellNum:this.cellNum,cellType:u,voltage:a.toFixed(4),resistance:r.toFixed(4),rUnit:s,timestamp:new Date().toISOString()};this.readings.push(m),this.addReadingToTable(m),this.cellNum++,this.currentReadings=[],this.waitingForProbeRemoval=!0,this.stabilityText.textContent="Reading saved. Move probes to next cell.",this.readingCounterSpan.textContent="",this.clearMeasurementsDisplay()}else this.stabilityText.textContent="Remove probes before next reading"}updateCurrentValues(e,t,s){this.cellNumberSpan.textContent=this.cellNum;const i=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;this.readingNumberSpan.textContent=this.isConnected?`${this.currentReadings.length+1}/${i}`:"-",this.voltageSpan.textContent=typeof e=="number"?e.toFixed(4)+"V":e,this.resistanceSpan.textContent=typeof t=="number"?t.toFixed(4)+" "+s:t}updateStabilityUI(e){this.waitingForProbeRemoval||(this.isConnected?e===0?(this.progressBar.style.width="100%",this.progressBar.classList.add("waiting"),this.stabilityText.textContent="Waiting for stable reading..."):(this.progressBar.style.width=`${e*100}%`,this.progressBar.classList.remove("waiting"),e<1&&(this.stabilityText.textContent="Stabilizing...")):(this.progressBar.style.width="100%",this.progressBar.classList.add("waiting"),this.stabilityText.textContent="Waiting for connection"))}addReadingToTable(e){const t=document.createElement("tr");t.className="bg-white dark:bg-gray-800",t.innerHTML=`
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${e.cellNum}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${e.voltage}V</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${e.resistance} ${e.rUnit}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${e.timestamp}</td>
        `,this.readingsLog.insertBefore(t,this.readingsLog.firstChild)}updateUI(e,t=""){switch(e){case"connected":this.connectButton.textContent="Disconnect",this.statusText.textContent="Connected",this.statusText.className="text-green-600 dark:text-green-400";break;case"disconnected":this.connectButton.textContent="Connect",this.statusText.textContent="Not Connected",this.statusText.className="text-gray-700 dark:text-gray-300";break;case"error":this.statusText.textContent=t,this.statusText.className="text-red-600 dark:text-red-400";break}}exportToCSV(){if(this.readings.length===0){alert("No readings to export");return}const e=new Date().toISOString().replace(/[:.]/g,"-"),t=this.cellTypeInput.value.replace("/","_")||"NA",s=`${e}-${t}.csv`,i=[["Cell #","Type","Voltage","ACIR","Time"],...this.readings.map(r=>[r.cellNum,r.cellType||"N/A",r.voltage+"V",r.resistance+" "+r.rUnit,r.timestamp])].map(r=>r.join(",")).join(`
`),n=new Blob([i],{type:"text/csv;charset=utf-8;"}),a=document.createElement("a");a.href=URL.createObjectURL(n),a.download=s,a.click()}updateReadingsLogTitle(){let e=this.cellTypeInput.value;e==="custom"&&(e=this.customCellTypeInput.value.trim()||"Custom"),this.readingsLogTitle.textContent=`${e} Readings`}clearLog(){(this.readings.length===0||confirm("Are you sure you want to clear all readings?"))&&(this.readings=[],this.readingsLog.innerHTML="",this.cellNum=1,this.currentReadings=[],this.stableCount=0,this.isReadingInProgress=!1,this.waitingForProbeRemoval=!1,this.lastReadingTime=0,this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent="-/-",this.updateStabilityUI(0),this.readingCounterSpan.textContent="",this.stabilityText.textContent=this.reader?"Waiting for stable reading...":"Waiting for connection",this.updateReadingsLogTitle(),this.clearMeasurementsDisplay())}resetReadingState(){this.stableCount=0,this.isReadingInProgress=!1,this.waitingForProbeRemoval=!1,this.prevVoltage=null,this.prevResistance=null,this.updateStabilityUI(0),this.currentReadings.length===0&&(this.stabilityText.textContent=this.isConnected?"Waiting for stable reading...":"Waiting for connection",this.readingNumberSpan.textContent="-")}updateMeasurementsDisplay(){const e=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;if(e>1){this.currentMeasurementsPanel.style.display="block",this.measurementsContainer.innerHTML="";for(let t=0;t<e;t++){const s=document.createElement("div");s.className="measurement-item bg-gray-50 dark:bg-gray-700 p-4 rounded-lg flex items-center justify-between";const i=this.currentReadings[t],n=!i;s.innerHTML=`
          <div class="flex items-center gap-4 flex-1">
            <span class="font-medium text-gray-700 dark:text-gray-300">Reading ${t+1}:</span>
            ${n?'<span class="text-gray-400 dark:text-gray-500 italic">Waiting...</span>':`<span class="text-gray-900 dark:text-white">
                Voltage: <strong>${i.voltage.toFixed(4)}V</strong> | 
                ACIR: <strong>${i.resistance.toFixed(4)} ${i.rUnit}</strong>
              </span>`}
          </div>
          ${n?"":`<button 
              class="delete-reading text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 font-bold text-xl px-3 py-1 rounded hover:bg-red-100 dark:hover:bg-red-900/30 transition-colors"
              data-index="${t}"
              title="Delete this reading"
            >✕</button>`}
        `,this.measurementsContainer.appendChild(s),n||s.querySelector(".delete-reading").addEventListener("click",()=>this.deleteMeasurement(t))}}else this.currentMeasurementsPanel.style.display="none"}clearMeasurementsDisplay(){this.measurementsContainer.innerHTML="",this.currentMeasurementsPanel.style.display="none"}deleteMeasurement(e){if(e<0||e>=this.currentReadings.length)return;this.currentReadings.splice(e,1),this.updateMeasurementsDisplay();const t=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;this.readingCounterSpan.textContent=`Reading ${this.currentReadings.length} of ${t}`,this.currentReadings.length===0?this.stabilityText.textContent="Ready for next reading":this.stabilityText.textContent="Reading deleted. Ready for next reading",this.waitingForProbeRemoval=!1,this.isReadingInProgress=!1,this.stableCount=0,this.updateStabilityUI(0)}}if("serial"in navigator&&window.isSecureContext)new y;else{const f=window.isSecureContext?"WebSerial is not supported in this browser. Please use a Chromium-based browser (Chrome, Edge, Opera, Brave, etc).":"WebSerial requires a secure context (HTTPS or localhost).";alert(f),document.querySelector(".container").innerHTML=`
        <header class="flex justify-between items-center py-6 px-6">
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Battery Logger for RC3563</h1>
        </header>
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow text-center">
            <h2 class="text-xl font-semibold text-red-600 dark:text-red-400 mb-4">WebSerial Not Supported</h2>
            <p class="text-gray-700 dark:text-gray-300">${f}</p>
        </div>
    `}
