(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const n of s)if(n.type==="childList")for(const r of n.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&i(r)}).observe(document,{childList:!0,subtree:!0});function t(s){const n={};return s.integrity&&(n.integrity=s.integrity),s.referrerPolicy&&(n.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?n.credentials="include":s.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function i(s){if(s.ep)return;s.ep=!0;const n=t(s);fetch(s.href,n)}})();function f(x,e="info"){const t=document.getElementById("toastContainer"),i=document.createElement("div");i.className=`toast ${e}`;const s=e==="success"?"✓":e==="error"?"✕":"ℹ",n=e==="success"?"bg-green-500":e==="error"?"bg-red-500":"bg-blue-500";i.innerHTML=`
    <div class="${n} text-white w-6 h-6 rounded-full flex items-center justify-center font-bold text-sm flex-shrink-0">${s}</div>
    <span class="text-gray-900 dark:text-gray-100 flex-1">${x}</span>
  `,t.appendChild(i),setTimeout(()=>{i.style.animation="slideOut 0.3s ease-in",setTimeout(()=>i.remove(),300)},3e3)}class C{constructor(){this.port=null,this.reader=null,this.writer=null,this.isConnected=!1,this.cellNum=1,this.readings=[],this.currentReadings=[],this.stableCount=0,this.prevResistance=null,this.prevVoltage=null,this.prevRUnit=null,this.requiredStable=10,this.epsilonResistance=.002,this.epsilonVoltage=.01,this.isReadingInProgress=!1,this.lastReadingTime=0,this.COOLDOWN_PERIOD=3e3,this.noSignalTimeout=null,this.waitingForProbeRemoval=!1,this.PROBE_REMOVAL_THRESHOLD=.1,this.readingLocked=!1,this.messageBuffer=new Uint8Array(0),this.connectButton=document.getElementById("connectButton"),this.statusText=document.getElementById("statusText"),this.cellTypeInput=document.getElementById("cellType"),this.customCellTypeInput=document.getElementById("customCellType"),this.averagingCheckbox=document.getElementById("averaging"),this.enableSoundCheckbox=document.getElementById("enableSound"),this.numReadingsInput=document.getElementById("numReadings"),this.cellNumberSpan=document.getElementById("cellNumber"),this.voltageSpan=document.getElementById("voltage"),this.resistanceSpan=document.getElementById("resistance"),this.stabilityText=document.getElementById("stabilityText"),this.stabilityProgress=document.getElementById("stabilityProgress").querySelector(".progress"),this.readingsLog=document.getElementById("readingsLog"),this.exportButton=document.getElementById("exportButton"),this.importButton=document.getElementById("importButton"),this.importFileInput=document.getElementById("importFileInput"),this.clearButton=document.getElementById("clearButton"),this.readingCounterSpan=document.createElement("div"),this.readingCounterSpan.className="text-sm text-gray-600 dark:text-gray-400 mt-2",this.stabilityText.parentNode.insertBefore(this.readingCounterSpan,this.stabilityText.nextSibling),this.readingNumberSpan=document.getElementById("readingNumber"),this.readingsLogTitle=document.getElementById("readingsLogTitle"),this.currentMeasurementsPanel=document.getElementById("currentMeasurementsPanel"),this.measurementsContainer=document.getElementById("measurementsContainer"),this.usbIcon=document.getElementById("usbIcon"),this.updateReadingsLogTitle(),this.cellTypeInput.addEventListener("change",()=>{const e=this.cellTypeInput.value==="custom";this.customCellTypeInput.classList.toggle("hidden",!e),e&&this.customCellTypeInput.focus()}),this.cellTypeInput.addEventListener("change",()=>this.updateReadingsLogTitle()),this.customCellTypeInput.addEventListener("input",()=>{this.cellTypeInput.value==="custom"&&this.updateReadingsLogTitle()}),this.initializeEventListeners(),this.progressBar=document.querySelector("#stabilityProgress .progress"),this.progressBar.classList.add("waiting"),this.stabilityText.textContent="Waiting for connection",this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent="-/-",this.updateStabilityUI(0),this.updateReadingsLogTitle()}initializeEventListeners(){this.connectButton.addEventListener("click",()=>this.toggleConnection()),this.exportButton.addEventListener("click",()=>this.exportToCSV()),this.importButton.addEventListener("click",()=>this.importFileInput.click()),this.importFileInput.addEventListener("change",e=>this.importFromCSV(e)),this.clearButton.addEventListener("click",()=>this.clearLog())}playBeep(){if(this.enableSoundCheckbox.checked)try{const e=new(window.AudioContext||window.webkitAudioContext),t=e.createOscillator(),i=e.createGain();t.connect(i),i.connect(e.destination),t.frequency.value=800,t.type="sine",i.gain.setValueAtTime(.15,e.currentTime),i.gain.exponentialRampToValueAtTime(.01,e.currentTime+.15),t.start(e.currentTime),t.stop(e.currentTime+.15)}catch(e){console.log("Audio not available:",e)}}async toggleConnection(){this.isConnected?await this.disconnect():await this.connect()}async connect(){try{this.port=await navigator.serial.requestPort(),await this.port.open({baudRate:115200}),this.reader=this.port.readable.getReader(),this.isConnected=!0,this.updateUI("connected"),this.stabilityText.textContent="Waiting for stable reading...",this.startReading()}catch(e){console.error("Connection error:",e),this.updateUI("error","Failed to connect to device")}}async disconnect(){this.reader&&(await this.reader.cancel(),await this.reader.releaseLock()),this.port&&await this.port.close(),this.isConnected=!1,this.updateUI("disconnected"),this.stabilityText.textContent="Idle",this.readingNumberSpan.textContent="-"}async startReading(){for(;;)try{const{value:e,done:t}=await this.reader.read();if(t)break;e&&this.appendToBuffer(e)}catch(e){console.error("Read error:",e),this.updateUI("error","Connection lost");break}}appendToBuffer(e){const t=new Uint8Array(this.messageBuffer.length+e.length);for(t.set(this.messageBuffer,0),t.set(e,this.messageBuffer.length),this.messageBuffer=t;this.messageBuffer.length>=10;){const i=this.messageBuffer.slice(0,10);this.processPacket(i),this.messageBuffer=this.messageBuffer.slice(10)}}processPacket(e){if(e.length!==10)return;const[t,i,s,n,r,a,c,h,o,d]=e,p=(t&240)>>4;let u=(s&255|(n&255)<<8|(r&255)<<16)/1e4,l="mΩ";p===5?l="mΩ":p===6?(l="mΩ",u="OL"):p===9?l="Ω":p===10&&(l="Ω",u="OL");const g=t&15;let m=(h&255|(o&255)<<8|(d&255)<<16)/1e4;m=(a===1?1:-1)*m,g===8&&(m="OL"),this.updateReadings(m,u,l)}processData(e){if(!e||e.length<10)return;const t=e.slice(0,10),[i,s,n,r,a,c,h,o,d,p]=t,u=(i&240)>>4;let l=(n&255|(r&255)<<8|(a&255)<<16)/1e4,g="mΩ";u===5?g="mΩ":u===6?(g="mΩ",l="OL"):u===9?g="Ω":u===10&&(g="Ω",l="OL");const m=i&15;let y=(o&255|(d&255)<<8|(p&255)<<16)/1e4;y=(c===1?1:-1)*y,m===8&&(y="OL"),this.updateReadings(y,l,g),e.length>10&&this.processData(e.slice(10))}updateReadings(e,t,i){this.updateCurrentValues(e,t,i);const s=Date.now(),n=typeof e=="number"&&typeof t=="number"&&e>0;if(this.noSignalTimeout&&clearTimeout(this.noSignalTimeout),this.waitingForProbeRemoval&&(!n||typeof e=="number"&&e<this.PROBE_REMOVAL_THRESHOLD)){this.waitingForProbeRemoval=!1,this.isReadingInProgress=!1,this.stableCount=0,this.updateStabilityUI(0),this.currentReadings.length<(this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1)&&(this.stabilityText.textContent="Ready for next reading");return}if(this.noSignalTimeout=setTimeout(()=>{!n&&!this.waitingForProbeRemoval&&(this.stableCount=0,this.updateStabilityUI(0),this.waitingForProbeRemoval||(this.stabilityText.textContent="Waiting for stable reading..."))},1e3),!n){!this.waitingForProbeRemoval&&this.isReadingInProgress&&(this.stableCount=0,this.updateStabilityUI(0),this.stabilityText.textContent="Invalid reading");return}if(this.waitingForProbeRemoval){this.stabilityText.textContent="Remove probes before next reading";return}if(!this.isReadingInProgress&&s-this.lastReadingTime<this.COOLDOWN_PERIOD){this.stabilityText.textContent="Please wait before next reading...";return}this.isReadingInProgress||(this.isReadingInProgress=!0,this.stableCount=0,this.prevVoltage=null,this.prevResistance=null,this.updateStabilityUI(0),this.currentReadings.length===0&&this.updateMeasurementsDisplay()),this.checkStability(e,t,i)?(this.stableCount++,this.updateStabilityUI(this.stableCount/this.requiredStable),this.stableCount===this.requiredStable&&(this.recordReading(e,t,i),this.lastReadingTime=s)):this.waitingForProbeRemoval||(this.stableCount=0,this.updateStabilityUI(0))}checkStability(e,t,i){if(typeof e!="number"||typeof t!="number")return!1;if(this.prevVoltage===null||this.prevResistance===null)return this.prevVoltage=e,this.prevResistance=t,this.prevRUnit=i,!1;const s=Math.abs(e-this.prevVoltage)<this.epsilonVoltage,n=Math.abs(t-this.prevResistance)<this.epsilonResistance,r=i===this.prevRUnit;return this.prevVoltage=e,this.prevResistance=t,this.prevRUnit=i,s&&n&&r}recordReading(e,t,i){if(typeof e!="number"||typeof t!="number")return;const s=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;this.currentReadings.push({voltage:e,resistance:t,rUnit:i});const n=this.currentReadings.length;if(this.readingCounterSpan.textContent=`Reading ${n} of ${s}`,this.stabilityText.textContent=n===s?"Final reading captured":"Reading captured",this.updateMeasurementsDisplay(),this.playBeep(),this.waitingForProbeRemoval=!0,n===s){const r=this.currentReadings.reduce((o,d)=>o+d.voltage,0)/s,a=this.currentReadings.reduce((o,d)=>o+d.resistance,0)/s;let c=this.cellTypeInput.value;c==="custom"&&(c=this.customCellTypeInput.value.trim()||"Custom");const h={cellNum:this.cellNum,cellType:c,voltage:r.toFixed(4),resistance:a.toFixed(4),rUnit:i,timestamp:new Date().toISOString()};this.readings.push(h),this.addReadingToTable(h),this.cellNum++,this.currentReadings=[],this.waitingForProbeRemoval=!0,this.stabilityText.textContent="Reading saved. Move probes to next cell.",this.readingCounterSpan.textContent="",this.clearMeasurementsDisplay()}else this.stabilityText.textContent="Remove probes before next reading"}updateCurrentValues(e,t,i){this.cellNumberSpan.textContent=this.cellNum;const s=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;this.readingNumberSpan.textContent=this.isConnected?`${this.currentReadings.length+1}/${s}`:"-",this.voltageSpan.textContent=typeof e=="number"?e.toFixed(4)+"V":e,this.resistanceSpan.textContent=typeof t=="number"?t.toFixed(4)+" "+i:t}updateStabilityUI(e){this.waitingForProbeRemoval||(this.isConnected?e===0?(this.progressBar.style.width="100%",this.progressBar.classList.add("waiting"),this.stabilityText.textContent="Waiting for stable reading..."):(this.progressBar.style.width=`${e*100}%`,this.progressBar.classList.remove("waiting"),e<1&&(this.stabilityText.textContent="Stabilizing...")):(this.progressBar.style.width="100%",this.progressBar.classList.add("waiting"),this.stabilityText.textContent="Waiting for connection"))}addReadingToTable(e){const t=document.createElement("tr");t.className="bg-white dark:bg-gray-800",t.innerHTML=`
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${e.cellNum}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${e.voltage}V</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${e.resistance} ${e.rUnit}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${e.timestamp}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-right">
                <button class="reload-cell-btn text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium" data-cell-num="${e.cellNum}">
                    ↻ Retest
                </button>
            </td>
        `,t.querySelector(".reload-cell-btn").addEventListener("click",()=>this.reloadCell(e.cellNum));const s=Array.from(this.readingsLog.querySelectorAll("tr"));let n=null;for(const r of s){const a=r.querySelector("td:first-child");if(a&&parseInt(a.textContent)<e.cellNum){n=r;break}}n?this.readingsLog.insertBefore(t,n):this.readingsLog.appendChild(t)}updateUI(e,t=""){switch(e){case"connected":this.connectButton.textContent="Disconnect",this.statusText.textContent="Connected",this.statusText.className="text-green-600 dark:text-green-400",f("Connected successfully","success");break;case"disconnected":this.connectButton.textContent="Connect",this.statusText.textContent="Not Connected",this.statusText.className="text-gray-700 dark:text-gray-300",f("Disconnected","info");break;case"error":this.statusText.textContent=t,this.statusText.className="text-red-600 dark:text-red-400";break}}exportToCSV(){if(this.readings.length===0){f("No readings to export","error");return}const e=new Date().toISOString().replace(/[:.]/g,"-"),t=this.cellTypeInput.value.replace("/","_")||"NA",i=`${e}-${t}.csv`,s=[["Cell #","Type","Voltage","ACIR","Time"],...this.readings.map(a=>[a.cellNum,a.cellType||"N/A",a.voltage+"V",a.resistance+" "+a.rUnit,a.timestamp])].map(a=>a.join(",")).join(`
`),n=new Blob([s],{type:"text/csv;charset=utf-8;"}),r=document.createElement("a");r.href=URL.createObjectURL(n),r.download=i,r.click()}importFromCSV(e){const t=e.target.files[0];if(!t)return;const i=new FileReader;i.onload=s=>{try{const a=s.target.result.split(`
`).slice(1).filter(h=>h.trim());if(a.length===0){f("No data found in CSV file","error");return}this.readings=[],this.readingsLog.innerHTML="";let c=0;a.forEach(h=>{const o=h.split(",");if(o.length>=5){const d=parseInt(o[0]),p=o[1],u=o[2].replace("V",""),l=o[3].trim().split(" "),g=l[0],m=l[1]||"mΩ",y=o[4],b={cellNum:d,cellType:p,voltage:u,resistance:g,rUnit:m,timestamp:y};this.readings.push(b),this.addReadingToTable(b),d>c&&(c=d)}}),this.cellNum=c+1,this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent="-/-",f(`Successfully imported ${a.length} readings`,"success")}catch(n){console.error("Error importing CSV:",n),f("Error importing CSV file. Please make sure it's in the correct format.","error")}e.target.value=""},i.readAsText(t)}updateReadingsLogTitle(){let e=this.cellTypeInput.value;e==="custom"&&(e=this.customCellTypeInput.value.trim()||"Custom"),this.readingsLogTitle.textContent=`${e} Readings`}clearLog(){(this.readings.length===0||confirm("Are you sure you want to clear all readings?"))&&(this.readings=[],this.readingsLog.innerHTML="",this.cellNum=1,this.currentReadings=[],this.stableCount=0,this.isReadingInProgress=!1,this.waitingForProbeRemoval=!1,this.lastReadingTime=0,this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent="-/-",this.updateStabilityUI(0),this.readingCounterSpan.textContent="",this.stabilityText.textContent=this.reader?"Waiting for stable reading...":"Waiting for connection",this.updateReadingsLogTitle(),this.clearMeasurementsDisplay())}reloadCell(e){if(!confirm(`Are you sure you want to reload Cell #${e}? This will delete the current reading.`))return;const t=this.readings.findIndex(s=>s.cellNum===e);t!==-1&&this.readings.splice(t,1),this.readingsLog.querySelectorAll("tr").forEach(s=>{const n=s.querySelector("td:first-child");n&&parseInt(n.textContent)===e&&s.remove()}),this.cellNum=e,this.currentReadings=[],this.stableCount=0,this.isReadingInProgress=!1,this.waitingForProbeRemoval=!1,this.lastReadingTime=0,this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent=this.isConnected?"1/"+(this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1):"-/-",this.updateStabilityUI(0),this.readingCounterSpan.textContent="",this.stabilityText.textContent=this.isConnected?"Ready to measure cell #"+e:"Waiting for connection",this.clearMeasurementsDisplay()}resetReadingState(){this.stableCount=0,this.isReadingInProgress=!1,this.waitingForProbeRemoval=!1,this.prevVoltage=null,this.prevResistance=null,this.updateStabilityUI(0),this.currentReadings.length===0&&(this.stabilityText.textContent=this.isConnected?"Waiting for stable reading...":"Waiting for connection",this.readingNumberSpan.textContent="-")}updateMeasurementsDisplay(){const e=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;if(e>1){this.currentMeasurementsPanel.style.display="block",this.measurementsContainer.innerHTML="";for(let t=0;t<e;t++){const i=document.createElement("div");i.className="measurement-item bg-gray-50 dark:bg-gray-700 p-4 rounded-lg flex items-center justify-between";const s=this.currentReadings[t],n=!s;i.innerHTML=`
          <div class="flex items-center gap-4 flex-1">
            <span class="font-medium text-gray-700 dark:text-gray-300">Reading ${t+1}:</span>
            ${n?'<span class="text-gray-400 dark:text-gray-500 italic">Waiting...</span>':`<span class="text-gray-900 dark:text-white">
                Voltage: <strong>${s.voltage.toFixed(4)}V</strong> | 
                ACIR: <strong>${s.resistance.toFixed(4)} ${s.rUnit}</strong>
              </span>`}
          </div>
          ${n?"":`<button 
              class="delete-reading text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 font-bold text-xl px-3 py-1 rounded hover:bg-red-100 dark:hover:bg-red-900/30 transition-colors"
              data-index="${t}"
              title="Delete this reading"
            >✕</button>`}
        `,this.measurementsContainer.appendChild(i),n||i.querySelector(".delete-reading").addEventListener("click",()=>this.deleteMeasurement(t))}}else this.currentMeasurementsPanel.style.display="none"}clearMeasurementsDisplay(){this.measurementsContainer.innerHTML="",this.currentMeasurementsPanel.style.display="none"}deleteMeasurement(e){if(e<0||e>=this.currentReadings.length)return;this.currentReadings.splice(e,1),this.updateMeasurementsDisplay();const t=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;this.readingCounterSpan.textContent=`Reading ${this.currentReadings.length} of ${t}`,this.currentReadings.length===0?this.stabilityText.textContent="Ready for next reading":this.stabilityText.textContent="Reading deleted. Ready for next reading",this.waitingForProbeRemoval=!1,this.isReadingInProgress=!1,this.stableCount=0,this.updateStabilityUI(0)}}if("serial"in navigator&&window.isSecureContext)new C;else{const x=window.isSecureContext?"WebSerial is not supported in this browser. Please use a Chromium-based browser (Chrome, Edge, Opera, Brave, etc).":"WebSerial requires a secure context (HTTPS or localhost).";f(x,"error"),document.querySelector(".container").innerHTML=`
        <header class="flex justify-between items-center py-6 px-6">
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Battery Logger for RC3563</h1>
        </header>
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow text-center">
            <h2 class="text-xl font-semibold text-red-600 dark:text-red-400 mb-4">WebSerial Not Supported</h2>
            <p class="text-gray-700 dark:text-gray-300">${x}</p>
        </div>
    `}
