(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))n(e);new MutationObserver(e=>{for(const s of e)if(s.type==="childList")for(const a of s.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function i(e){const s={};return e.integrity&&(s.integrity=e.integrity),e.referrerPolicy&&(s.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?s.credentials="include":e.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(e){if(e.ep)return;e.ep=!0;const s=i(e);fetch(e.href,s)}})();class x{constructor(){this.port=null,this.reader=null,this.writer=null,this.isConnected=!1,this.cellNum=1,this.readings=[],this.currentReadings=[],this.stableCount=0,this.prevResistance=null,this.prevVoltage=null,this.prevRUnit=null,this.requiredStable=10,this.epsilonResistance=.01,this.epsilonVoltage=.001,this.isReadingInProgress=!1,this.lastReadingTime=0,this.COOLDOWN_PERIOD=3e3,this.noSignalTimeout=null,this.waitingForProbeRemoval=!1,this.PROBE_REMOVAL_THRESHOLD=.1,this.readingLocked=!1,this.connectButton=document.getElementById("connectButton"),this.statusText=document.getElementById("statusText"),this.cellTypeInput=document.getElementById("cellType"),this.customCellTypeInput=document.getElementById("customCellType"),this.averagingCheckbox=document.getElementById("averaging"),this.numReadingsInput=document.getElementById("numReadings"),this.cellNumberSpan=document.getElementById("cellNumber"),this.voltageSpan=document.getElementById("voltage"),this.resistanceSpan=document.getElementById("resistance"),this.stabilityText=document.getElementById("stabilityText"),this.stabilityProgress=document.getElementById("stabilityProgress").querySelector(".progress"),this.readingsLog=document.getElementById("readingsLog"),this.exportButton=document.getElementById("exportButton"),this.clearButton=document.getElementById("clearButton"),this.readingCounterSpan=document.createElement("div"),this.readingCounterSpan.className="text-sm text-gray-600 dark:text-gray-400 mt-2",this.stabilityText.parentNode.insertBefore(this.readingCounterSpan,this.stabilityText.nextSibling),this.readingNumberSpan=document.getElementById("readingNumber"),this.readingsLogTitle=document.getElementById("readingsLogTitle"),this.updateReadingsLogTitle(),this.cellTypeInput.addEventListener("change",()=>{const t=this.cellTypeInput.value==="custom";this.customCellTypeInput.classList.toggle("hidden",!t),t&&this.customCellTypeInput.focus()}),this.cellTypeInput.addEventListener("change",()=>this.updateReadingsLogTitle()),this.customCellTypeInput.addEventListener("input",()=>{this.cellTypeInput.value==="custom"&&this.updateReadingsLogTitle()}),this.initializeEventListeners(),this.progressBar=document.querySelector("#stabilityProgress .progress"),this.progressBar.classList.add("waiting"),this.stabilityText.textContent="Idle",this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent="-/-",this.updateStabilityUI(0),this.updateReadingsLogTitle(),document.querySelectorAll(".value").forEach(t=>t.classList.add("blur-sm","select-none"))}initializeEventListeners(){this.connectButton.addEventListener("click",()=>this.toggleConnection()),this.exportButton.addEventListener("click",()=>this.exportToCSV()),this.clearButton.addEventListener("click",()=>this.clearLog())}async toggleConnection(){this.isConnected?await this.disconnect():await this.connect()}async connect(){try{this.port=await navigator.serial.requestPort(),await this.port.open({baudRate:115200}),this.reader=this.port.readable.getReader(),this.isConnected=!0,this.updateUI("connected"),this.stabilityText.textContent="Waiting for stable reading...",this.startReading()}catch(t){console.error("Connection error:",t),this.updateUI("error","Failed to connect to device")}}async disconnect(){this.reader&&(await this.reader.cancel(),await this.reader.releaseLock()),this.port&&await this.port.close(),this.isConnected=!1,this.updateUI("disconnected"),this.stabilityText.textContent="Idle",this.readingNumberSpan.textContent="-"}async startReading(){for(;;)try{const{value:t,done:i}=await this.reader.read();if(i)break;this.processData(t)}catch(t){console.error("Read error:",t),this.updateUI("error","Connection lost");break}}processData(t){if(t.length>=10){const i=new Uint8Array(t),[n,e,s,a,r,o,p,l,c,b]=i,u=(n&240)>>4;let m=(s&255|(a&255)<<8|(r&255)<<16)/1e4,d="mΩ";u===5?d="mΩ":u===6?(d="mΩ",m="OL"):u===9?d="Ω":u===10&&(d="Ω",m="OL");const y=n&15;let g=(l&255|(c&255)<<8|(b&255)<<16)/1e4;g=(o===1?1:-1)*g,y===8&&(g="OL"),this.updateReadings(g,m,d)}}updateReadings(t,i,n){this.updateCurrentValues(t,i,n);const e=Date.now(),s=typeof t=="number"&&typeof i=="number"&&t>0;if(this.noSignalTimeout&&clearTimeout(this.noSignalTimeout),this.waitingForProbeRemoval&&(!s||typeof t=="number"&&t<this.PROBE_REMOVAL_THRESHOLD)){this.waitingForProbeRemoval=!1,this.isReadingInProgress=!1,this.stableCount=0,this.updateStabilityUI(0),this.currentReadings.length<(this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1)&&(this.stabilityText.textContent="Ready for next reading");return}if(this.noSignalTimeout=setTimeout(()=>{!s&&!this.waitingForProbeRemoval&&(this.stableCount=0,this.updateStabilityUI(0),this.waitingForProbeRemoval||(this.stabilityText.textContent="Waiting for stable reading..."))},1e3),!s){!this.waitingForProbeRemoval&&this.isReadingInProgress&&(this.stableCount=0,this.updateStabilityUI(0),this.stabilityText.textContent="Invalid reading");return}if(this.waitingForProbeRemoval){this.stabilityText.textContent="Remove probes before next reading";return}if(!this.isReadingInProgress&&e-this.lastReadingTime<this.COOLDOWN_PERIOD){this.stabilityText.textContent="Please wait before next reading...";return}this.isReadingInProgress||(this.isReadingInProgress=!0,this.stableCount=0,this.prevVoltage=null,this.prevResistance=null,this.updateStabilityUI(0)),this.checkStability(t,i,n)?(this.stableCount++,this.updateStabilityUI(this.stableCount/this.requiredStable),this.stableCount===this.requiredStable&&(this.recordReading(t,i,n),this.lastReadingTime=e)):this.waitingForProbeRemoval||(this.stableCount=0,this.updateStabilityUI(0))}checkStability(t,i,n){if(typeof t!="number"||typeof i!="number")return!1;if(this.prevVoltage===null||this.prevResistance===null)return this.prevVoltage=t,this.prevResistance=i,this.prevRUnit=n,!1;const e=Math.abs(t-this.prevVoltage)<this.epsilonVoltage,s=Math.abs(i-this.prevResistance)<this.epsilonResistance,a=n===this.prevRUnit;return this.prevVoltage=t,this.prevResistance=i,this.prevRUnit=n,e&&s&&a}recordReading(t,i,n){if(typeof t!="number"||typeof i!="number")return;const e=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;this.currentReadings.push({voltage:t,resistance:i});const s=this.currentReadings.length;if(this.readingCounterSpan.textContent=`Reading ${s} of ${e}`,this.stabilityText.textContent=s===e?"Final reading captured":"Reading captured",this.waitingForProbeRemoval=!0,s===e){const a=this.currentReadings.reduce((l,c)=>l+c.voltage,0)/e,r=this.currentReadings.reduce((l,c)=>l+c.resistance,0)/e;let o=this.cellTypeInput.value;o==="custom"&&(o=this.customCellTypeInput.value.trim()||"Custom");const p={cellNum:this.cellNum,cellType:o,voltage:a.toFixed(4),resistance:r.toFixed(4),rUnit:n,timestamp:new Date().toISOString()};this.readings.push(p),this.addReadingToTable(p),this.cellNum++,this.currentReadings=[],this.waitingForProbeRemoval=!0,this.stabilityText.textContent="Reading saved. Move probes to next cell.",this.readingCounterSpan.textContent=""}else this.stabilityText.textContent="Remove probes before next reading"}updateCurrentValues(t,i,n){this.cellNumberSpan.textContent=this.cellNum;const e=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;this.readingNumberSpan.textContent=this.isConnected?`${this.currentReadings.length+1}/${e}`:"-",this.voltageSpan.textContent=typeof t=="number"?t.toFixed(4)+"V":t,this.resistanceSpan.textContent=typeof i=="number"?i.toFixed(4)+" "+n:i}updateStabilityUI(t){this.waitingForProbeRemoval||(t===0?(this.progressBar.style.width="100%",this.progressBar.classList.add("waiting"),this.stabilityText.textContent="Waiting for stable reading..."):(this.progressBar.style.width=`${t*100}%`,this.progressBar.classList.remove("waiting"),t<1&&(this.stabilityText.textContent="Stabilizing...")))}addReadingToTable(t){const i=document.createElement("tr");i.className="bg-white dark:bg-gray-800",i.innerHTML=`
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${t.cellNum}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${t.voltage}V</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${t.resistance} ${t.rUnit}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${t.timestamp}</td>
        `,this.readingsLog.insertBefore(i,this.readingsLog.firstChild)}updateUI(t,i=""){switch(t){case"connected":this.connectButton.textContent="Disconnect",this.statusText.textContent="Connected",this.statusText.className="text-green-600 dark:text-green-400",document.querySelectorAll(".value").forEach(n=>n.classList.remove("blur-sm","select-none"));break;case"disconnected":this.connectButton.textContent="Connect",this.statusText.textContent="Not Connected",this.statusText.className="text-gray-700 dark:text-gray-300",document.querySelectorAll(".value").forEach(n=>n.classList.add("blur-sm","select-none"));break;case"error":this.statusText.textContent=i,this.statusText.className="text-red-600 dark:text-red-400";break}}exportToCSV(){if(this.readings.length===0){alert("No readings to export");return}const t=new Date().toISOString().replace(/[:.]/g,"-"),i=this.cellTypeInput.value.replace("/","_")||"NA",n=`${t}-${i}.csv`,e=[["Cell #","Type","Voltage","ACIR","Time"],...this.readings.map(r=>[r.cellNum,r.cellType||"N/A",r.voltage+"V",r.resistance+" "+r.rUnit,r.timestamp])].map(r=>r.join(",")).join(`
`),s=new Blob([e],{type:"text/csv;charset=utf-8;"}),a=document.createElement("a");a.href=URL.createObjectURL(s),a.download=n,a.click()}updateReadingsLogTitle(){let t=this.cellTypeInput.value;t==="custom"&&(t=this.customCellTypeInput.value.trim()||"Custom"),this.readingsLogTitle.textContent=`${t} Readings`}clearLog(){confirm("Are you sure you want to clear all readings?")&&(this.readings=[],this.readingsLog.innerHTML="",this.cellNum=1,this.currentReadings=[],this.stableCount=0,this.isReadingInProgress=!1,this.waitingForProbeRemoval=!1,this.lastReadingTime=0,this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent="-/-",this.updateStabilityUI(0),this.readingCounterSpan.textContent="",this.stabilityText.textContent="Waiting for stable reading...",this.updateReadingsLogTitle())}resetReadingState(){this.stableCount=0,this.isReadingInProgress=!1,this.waitingForProbeRemoval=!1,this.prevVoltage=null,this.prevResistance=null,this.updateStabilityUI(0),this.currentReadings.length===0&&(this.stabilityText.textContent=this.isConnected?"Waiting for stable reading...":"Idle",this.readingNumberSpan.textContent="-")}}if("serial"in navigator&&window.isSecureContext)new x;else{const h=window.isSecureContext?"WebSerial is not supported in this browser. Please use a Chromium-based browser (Chrome, Edge, Opera, Brave, etc).":"WebSerial requires a secure context (HTTPS or localhost).";alert(h),document.querySelector(".container").innerHTML=`
        <header class="flex justify-between items-center py-6 px-6">
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Battery Logger for RC3563</h1>
        </header>
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow text-center">
            <h2 class="text-xl font-semibold text-red-600 dark:text-red-400 mb-4">WebSerial Not Supported</h2>
            <p class="text-gray-700 dark:text-gray-300">${h}</p>
        </div>
    `}
