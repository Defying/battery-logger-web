(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))i(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const r of s.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&i(r)}).observe(document,{childList:!0,subtree:!0});function t(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerPolicy&&(s.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?s.credentials="include":n.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(n){if(n.ep)return;n.ep=!0;const s=t(n);fetch(n.href,s)}})();function h(y,e="info"){const t=document.getElementById("toastContainer"),i=document.createElement("div");i.className=`toast ${e}`;const n=e==="success"?"✓":e==="error"?"✕":"ℹ",s=e==="success"?"bg-green-500":e==="error"?"bg-red-500":"bg-blue-500";i.innerHTML=`
    <div class="${s} text-white w-6 h-6 rounded-full flex items-center justify-center font-bold text-sm flex-shrink-0">${n}</div>
    <span class="text-gray-900 dark:text-gray-100 flex-1">${y}</span>
  `,t.appendChild(i),setTimeout(()=>{i.style.animation="slideOut 0.3s ease-in",setTimeout(()=>i.remove(),300)},3e3)}class C{constructor(){this.port=null,this.reader=null,this.writer=null,this.isConnected=!1,this.cellNum=1,this.readings=[],this.currentReadings=[],this.stableCount=0,this.prevResistance=null,this.prevVoltage=null,this.prevRUnit=null,this.requiredStable=10,this.epsilonResistance=.002,this.epsilonVoltage=.01,this.isReadingInProgress=!1,this.lastReadingTime=0,this.COOLDOWN_PERIOD=3e3,this.noSignalTimeout=null,this.waitingForProbeRemoval=!1,this.PROBE_REMOVAL_THRESHOLD=.1,this.readingLocked=!1,this.messageBuffer=new Uint8Array(0),this.connectButton=document.getElementById("connectButton"),this.statusText=document.getElementById("statusText"),this.cellTypeInput=document.getElementById("cellType"),this.customCellTypeInput=document.getElementById("customCellType"),this.averagingCheckbox=document.getElementById("averaging"),this.enableSoundCheckbox=document.getElementById("enableSound"),this.numReadingsInput=document.getElementById("numReadings"),this.cellNumberSpan=document.getElementById("cellNumber"),this.voltageSpan=document.getElementById("voltage"),this.resistanceSpan=document.getElementById("resistance"),this.stabilityText=document.getElementById("stabilityText"),this.stabilityProgress=document.getElementById("stabilityProgress").querySelector(".progress"),this.readingsLog=document.getElementById("readingsLog"),this.exportButton=document.getElementById("exportButton"),this.importButton=document.getElementById("importButton"),this.importFileInput=document.getElementById("importFileInput"),this.clearButton=document.getElementById("clearButton"),this.readingCounterSpan=document.createElement("div"),this.readingCounterSpan.className="text-sm text-gray-600 dark:text-gray-400 mt-2",this.stabilityText.parentNode.insertBefore(this.readingCounterSpan,this.stabilityText.nextSibling),this.readingNumberSpan=document.getElementById("readingNumber"),this.readingsLogTitle=document.getElementById("readingsLogTitle"),this.currentMeasurementsPanel=document.getElementById("currentMeasurementsPanel"),this.measurementsContainer=document.getElementById("measurementsContainer"),this.currentReadingPanel=document.querySelector(".current-reading"),this.readingsLogPanel=document.querySelector(".readings-log"),this.readingValuesPanel=document.querySelector(".reading-values"),this.usbIcon=document.getElementById("usbIcon"),this.updateReadingsLogTitle(),this.readingsLogPanel.style.display="none",this.readingValuesPanel.style.display="none",this.currentSortColumn=null,this.currentSortDirection="asc",this.initializeSorting(),this.cellTypeInput.addEventListener("change",()=>{const e=this.cellTypeInput.value==="custom";this.customCellTypeInput.classList.toggle("hidden",!e),e&&this.customCellTypeInput.focus()}),this.cellTypeInput.addEventListener("change",()=>this.updateReadingsLogTitle()),this.customCellTypeInput.addEventListener("input",()=>{this.cellTypeInput.value==="custom"&&this.updateReadingsLogTitle()}),this.initializeEventListeners(),this.progressBar=document.querySelector("#stabilityProgress .progress"),this.progressBar.classList.add("waiting"),this.stabilityText.textContent="Waiting for connection",this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent="-/-",this.updateStabilityUI(0),this.updateReadingsLogTitle()}initializeEventListeners(){this.connectButton.addEventListener("click",()=>this.toggleConnection()),this.exportButton.addEventListener("click",()=>this.exportToCSV()),this.importButton.addEventListener("click",()=>this.importFileInput.click()),this.importFileInput.addEventListener("change",e=>this.importFromCSV(e)),this.clearButton.addEventListener("click",()=>this.clearLog()),this.connectButton.addEventListener("mouseenter",()=>{const e=this.connectButton.querySelector("span");this.port&&e.textContent==="Connected"&&(e.textContent="Disconnect")}),this.connectButton.addEventListener("mouseleave",()=>{const e=this.connectButton.querySelector("span");this.port&&e.textContent==="Disconnect"&&(e.textContent="Connected")})}playBeep(){if(this.enableSoundCheckbox.checked)try{const e=new(window.AudioContext||window.webkitAudioContext),t=e.createOscillator(),i=e.createGain();t.connect(i),i.connect(e.destination),t.frequency.value=800,t.type="sine",i.gain.setValueAtTime(.15,e.currentTime),i.gain.exponentialRampToValueAtTime(.01,e.currentTime+.15),t.start(e.currentTime),t.stop(e.currentTime+.15)}catch(e){console.log("Audio not available:",e)}}async toggleConnection(){this.isConnected?await this.disconnect():await this.connect()}async connect(){try{this.port=await navigator.serial.requestPort(),await this.port.open({baudRate:115200}),this.reader=this.port.readable.getReader(),this.isConnected=!0,this.updateUI("connected"),this.stabilityText.textContent="Waiting for stable reading...",this.readingsLogPanel.style.display="block",this.readingValuesPanel.style.display="grid",this.startReading()}catch(e){console.error("Connection error:",e),this.updateUI("error","Failed to connect to device")}}async disconnect(){this.reader&&(await this.reader.cancel(),await this.reader.releaseLock()),this.port&&await this.port.close(),this.isConnected=!1,this.updateUI("disconnected"),this.stabilityText.textContent="Idle",this.readingNumberSpan.textContent="-",this.readings.length===0&&(this.readingsLogPanel.style.display="none",this.readingValuesPanel.style.display="none")}async startReading(){for(;;)try{const{value:e,done:t}=await this.reader.read();if(t)break;e&&this.appendToBuffer(e)}catch(e){console.error("Read error:",e),this.updateUI("error","Connection lost");break}}appendToBuffer(e){const t=new Uint8Array(this.messageBuffer.length+e.length);for(t.set(this.messageBuffer,0),t.set(e,this.messageBuffer.length),this.messageBuffer=t;this.messageBuffer.length>=10;){const i=this.messageBuffer.slice(0,10);this.processPacket(i),this.messageBuffer=this.messageBuffer.slice(10)}}processPacket(e){if(e.length!==10)return;const[t,i,n,s,r,a,l,g,o,d]=e,m=(t&240)>>4;let u=(n&255|(s&255)<<8|(r&255)<<16)/1e4,c="mΩ";m===5?c="mΩ":m===6?(c="mΩ",u="OL"):m===9?c="Ω":m===10&&(c="Ω",u="OL");const p=t&15;let f=(g&255|(o&255)<<8|(d&255)<<16)/1e4;f=(a===1?1:-1)*f,p===8&&(f="OL"),this.updateReadings(f,u,c)}processData(e){if(!e||e.length<10)return;const t=e.slice(0,10),[i,n,s,r,a,l,g,o,d,m]=t,u=(i&240)>>4;let c=(s&255|(r&255)<<8|(a&255)<<16)/1e4,p="mΩ";u===5?p="mΩ":u===6?(p="mΩ",c="OL"):u===9?p="Ω":u===10&&(p="Ω",c="OL");const f=i&15;let x=(o&255|(d&255)<<8|(m&255)<<16)/1e4;x=(l===1?1:-1)*x,f===8&&(x="OL"),this.updateReadings(x,c,p),e.length>10&&this.processData(e.slice(10))}updateReadings(e,t,i){this.updateCurrentValues(e,t,i);const n=Date.now(),s=typeof e=="number"&&typeof t=="number"&&e>0;if(this.noSignalTimeout&&clearTimeout(this.noSignalTimeout),this.waitingForProbeRemoval&&(!s||typeof e=="number"&&e<this.PROBE_REMOVAL_THRESHOLD)){this.waitingForProbeRemoval=!1,this.isReadingInProgress=!1,this.stableCount=0,this.updateStabilityUI(0),this.currentReadings.length<(this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1)&&(this.stabilityText.textContent="Ready for next reading");return}if(this.noSignalTimeout=setTimeout(()=>{!s&&!this.waitingForProbeRemoval&&(this.stableCount=0,this.updateStabilityUI(0),this.waitingForProbeRemoval||(this.stabilityText.textContent="Waiting for stable reading..."))},1e3),!s){!this.waitingForProbeRemoval&&this.isReadingInProgress&&(this.stableCount=0,this.updateStabilityUI(0),this.stabilityText.textContent="Invalid reading");return}if(this.waitingForProbeRemoval){this.stabilityText.textContent="Remove probes before next reading";return}if(!this.isReadingInProgress&&n-this.lastReadingTime<this.COOLDOWN_PERIOD){this.stabilityText.textContent="Please wait before next reading...";return}this.isReadingInProgress||(this.isReadingInProgress=!0,this.stableCount=0,this.prevVoltage=null,this.prevResistance=null,this.updateStabilityUI(0),this.currentReadings.length===0&&this.updateMeasurementsDisplay()),this.checkStability(e,t,i)?(this.stableCount++,this.updateStabilityUI(this.stableCount/this.requiredStable),this.stableCount===this.requiredStable&&(this.recordReading(e,t,i),this.lastReadingTime=n)):this.waitingForProbeRemoval||(this.stableCount=0,this.updateStabilityUI(0))}checkStability(e,t,i){if(typeof e!="number"||typeof t!="number")return!1;if(this.prevVoltage===null||this.prevResistance===null)return this.prevVoltage=e,this.prevResistance=t,this.prevRUnit=i,!1;const n=Math.abs(e-this.prevVoltage)<this.epsilonVoltage,s=Math.abs(t-this.prevResistance)<this.epsilonResistance,r=i===this.prevRUnit;return this.prevVoltage=e,this.prevResistance=t,this.prevRUnit=i,n&&s&&r}recordReading(e,t,i){if(typeof e!="number"||typeof t!="number")return;const n=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;this.currentReadings.push({voltage:e,resistance:t,rUnit:i});const s=this.currentReadings.length;if(this.readingCounterSpan.textContent=`Reading ${s} of ${n}`,this.stabilityText.textContent=s===n?"Final reading captured":"Reading captured",this.updateMeasurementsDisplay(),this.playBeep(),this.waitingForProbeRemoval=!0,s===n){const r=this.currentReadings.reduce((o,d)=>o+d.voltage,0)/n,a=this.currentReadings.reduce((o,d)=>o+d.resistance,0)/n;let l=this.cellTypeInput.value;l==="custom"&&(l=this.customCellTypeInput.value.trim()||"Custom");const g={cellNum:this.cellNum,cellType:l,voltage:r.toFixed(4),resistance:a.toFixed(4),rUnit:i,timestamp:new Date().toISOString()};this.readings.push(g),this.addReadingToTable(g),this.cellNum++,this.currentReadings=[],this.waitingForProbeRemoval=!0,this.stabilityText.textContent="Reading saved. Move probes to next cell.",this.readingCounterSpan.textContent="",this.clearMeasurementsDisplay()}else this.stabilityText.textContent="Remove probes before next reading"}updateCurrentValues(e,t,i){this.cellNumberSpan.textContent=this.cellNum;const n=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;this.readingNumberSpan.textContent=this.isConnected?`${this.currentReadings.length+1}/${n}`:"-",this.voltageSpan.textContent=typeof e=="number"?e.toFixed(4)+"V":e,this.resistanceSpan.textContent=typeof t=="number"?t.toFixed(4)+" "+i:t}updateStabilityUI(e){this.waitingForProbeRemoval||(this.isConnected?e===0?(this.progressBar.style.width="100%",this.progressBar.classList.add("waiting"),this.stabilityText.textContent="Waiting for stable reading..."):(this.progressBar.style.width=`${e*100}%`,this.progressBar.classList.remove("waiting"),e<1&&(this.stabilityText.textContent="Stabilizing...")):(this.progressBar.style.width="100%",this.progressBar.classList.add("waiting"),this.stabilityText.textContent="Waiting for connection"))}addReadingToTable(e){const t=document.createElement("tr");t.className="bg-white dark:bg-gray-800",t.dataset.cellNum=e.cellNum,t.innerHTML=`
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${e.cellNum}</td>
            <td class="voltage-cell px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300" data-voltage="${e.voltage}">${e.voltage}V</td>
            <td class="acir-cell px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300" data-resistance="${e.resistance}">${e.resistance} ${e.rUnit}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300">${e.timestamp}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-right">
                <button class="reload-cell-btn text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium text-3xl" data-cell-num="${e.cellNum}">
                    ↻
                </button>
            </td>
        `,t.querySelector(".reload-cell-btn").addEventListener("click",()=>this.reloadCell(e.cellNum));const n=Array.from(this.readingsLog.querySelectorAll("tr"));let s=null;for(const r of n){const a=r.querySelector("td:first-child");if(a&&parseInt(a.textContent)<e.cellNum){s=r;break}}s?this.readingsLog.insertBefore(t,s):this.readingsLog.appendChild(t),this.updateHighlights()}updateHighlights(){const e=this.readingsLog.querySelectorAll(".voltage-cell");if(e.length>0){let i=1/0,n=-1/0;e.forEach(s=>{const r=parseFloat(s.dataset.voltage);r<i&&(i=r),r>n&&(n=r)}),e.forEach(s=>{const r=parseFloat(s.dataset.voltage);s.classList.remove("text-green-600","dark:text-green-400","text-red-600","dark:text-red-400","font-bold"),s.classList.add("text-gray-900","dark:text-gray-300"),r===n?(s.classList.remove("text-gray-900","dark:text-gray-300"),s.classList.add("text-green-600","dark:text-green-400","font-bold")):r===i&&(s.classList.remove("text-gray-900","dark:text-gray-300"),s.classList.add("text-red-600","dark:text-red-400","font-bold"))})}const t=this.readingsLog.querySelectorAll(".acir-cell");if(t.length>0){let i=1/0,n=-1/0;t.forEach(s=>{const r=parseFloat(s.dataset.resistance);r<i&&(i=r),r>n&&(n=r)}),t.forEach(s=>{const r=parseFloat(s.dataset.resistance);s.classList.remove("text-green-600","dark:text-green-400","text-red-600","dark:text-red-400","font-bold"),s.classList.add("text-gray-900","dark:text-gray-300"),r===i?(s.classList.remove("text-gray-900","dark:text-gray-300"),s.classList.add("text-green-600","dark:text-green-400","font-bold")):r===n&&(s.classList.remove("text-gray-900","dark:text-gray-300"),s.classList.add("text-red-600","dark:text-red-400","font-bold"))})}}initializeSorting(){document.querySelectorAll(".sortable-header").forEach(t=>{t.addEventListener("click",()=>{const i=t.dataset.sort;this.sortTable(i)})})}sortTable(e){this.currentSortColumn===e?this.currentSortDirection=this.currentSortDirection==="asc"?"desc":"asc":(this.currentSortColumn=e,this.currentSortDirection="asc");const t=Array.from(this.readingsLog.querySelectorAll("tr"));t.sort((i,n)=>{let s,r;return e==="cellNum"?(s=parseInt(i.querySelector("td:nth-child(1)").textContent),r=parseInt(n.querySelector("td:nth-child(1)").textContent)):e==="voltage"?(s=parseFloat(i.querySelector(".voltage-cell").dataset.voltage),r=parseFloat(n.querySelector(".voltage-cell").dataset.voltage)):e==="resistance"?(s=parseFloat(i.querySelector(".acir-cell").dataset.resistance),r=parseFloat(n.querySelector(".acir-cell").dataset.resistance)):e==="timestamp"&&(s=new Date(i.querySelector("td:nth-child(4)").textContent),r=new Date(n.querySelector("td:nth-child(4)").textContent)),this.currentSortDirection==="asc"?s>r?1:-1:s<r?1:-1}),this.readingsLog.innerHTML="",t.forEach(i=>this.readingsLog.appendChild(i)),document.querySelectorAll(".sortable-header").forEach(i=>{const n=i.querySelector(".sort-indicator");i.dataset.sort===e?n.textContent=this.currentSortDirection==="asc"?" ▲":" ▼":n.textContent=""}),this.updateHighlights()}updateUI(e,t=""){const i=this.connectButton.querySelector("span");switch(e){case"connected":i.textContent="Connected",this.usbIcon.classList.remove("hidden"),this.connectButton.classList.add("connected-glow"),h("Connected successfully","success");break;case"disconnected":i.textContent="Connect",this.usbIcon.classList.add("hidden"),this.connectButton.classList.remove("connected-glow"),h("Disconnected","info");break;case"error":h(t,"error");break}}exportToCSV(){if(this.readings.length===0){h("No readings to export","error");return}const e=new Date().toISOString().replace(/[:.]/g,"-"),t=this.cellTypeInput.value.replace("/","_")||"NA",i=`${e}-${t}.csv`,n=[["Cell #","Type","Voltage","ACIR","Time"],...this.readings.map(a=>[a.cellNum,a.cellType||"N/A",a.voltage+"V",a.resistance+" "+a.rUnit,a.timestamp])].map(a=>a.join(",")).join(`
`),s=new Blob([n],{type:"text/csv;charset=utf-8;"}),r=document.createElement("a");r.href=URL.createObjectURL(s),r.download=i,r.click()}importFromCSV(e){const t=e.target.files[0];if(!t)return;const i=new FileReader;i.onload=n=>{try{const a=n.target.result.split(`
`).slice(1).filter(g=>g.trim());if(a.length===0){h("No data found in CSV file","error");return}this.readings=[],this.readingsLog.innerHTML="";let l=0;a.forEach(g=>{const o=g.split(",");if(o.length>=5){const d=parseInt(o[0]),m=o[1],u=o[2].replace("V",""),c=o[3].trim().split(" "),p=c[0],f=c[1]||"mΩ",x=o[4],b={cellNum:d,cellType:m,voltage:u,resistance:p,rUnit:f,timestamp:x};this.readings.push(b),this.addReadingToTable(b),d>l&&(l=d)}}),this.cellNum=l+1,this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent="-/-",this.readingsLogPanel.style.display="block",this.readingValuesPanel.style.display="grid",this.updateHighlights(),h(`Successfully imported ${a.length} readings`,"success")}catch(s){console.error("Error importing CSV:",s),h("Error importing CSV file. Please make sure it's in the correct format.","error")}e.target.value=""},i.readAsText(t)}updateReadingsLogTitle(){let e=this.cellTypeInput.value;e==="custom"&&(e=this.customCellTypeInput.value.trim()||"Custom"),this.readingsLogTitle.textContent=`${e} Readings`}clearLog(){if(this.readings.length===0){h("No readings to clear","info");return}const e=document.getElementById("confirmModal"),t=document.getElementById("confirmOk"),i=document.getElementById("confirmCancel");e.classList.remove("hidden");const n=()=>{this.readings=[],this.readingsLog.innerHTML="",this.cellNum=1,this.currentReadings=[],this.stableCount=0,this.isReadingInProgress=!1,this.waitingForProbeRemoval=!1,this.lastReadingTime=0,this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent="-/-",this.updateStabilityUI(0),this.readingCounterSpan.textContent="",this.stabilityText.textContent=this.reader?"Waiting for stable reading...":"Waiting for connection",this.updateReadingsLogTitle(),this.clearMeasurementsDisplay(),this.isConnected||(this.readingsLogPanel.style.display="none",this.readingValuesPanel.style.display="none"),h("Readings cleared","info"),e.classList.add("hidden"),r()},s=()=>{e.classList.add("hidden"),r()},r=()=>{t.removeEventListener("click",n),i.removeEventListener("click",s),e.removeEventListener("click",a)},a=l=>{l.target===e&&s()};t.addEventListener("click",n),i.addEventListener("click",s),e.addEventListener("click",a)}reloadCell(e){if(!confirm(`Are you sure you want to reload Cell #${e}? This will delete the current reading.`))return;const t=this.readings.findIndex(n=>n.cellNum===e);t!==-1&&this.readings.splice(t,1),this.readingsLog.querySelectorAll("tr").forEach(n=>{const s=n.querySelector("td:first-child");s&&parseInt(s.textContent)===e&&n.remove()}),this.updateHighlights(),this.cellNum=e,this.currentReadings=[],this.stableCount=0,this.isReadingInProgress=!1,this.waitingForProbeRemoval=!1,this.lastReadingTime=0,this.updateCurrentValues("-","-",""),this.readingNumberSpan.textContent=this.isConnected?"1/"+(this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1):"-/-",this.updateStabilityUI(0),this.readingCounterSpan.textContent="",this.stabilityText.textContent=this.isConnected?"Ready to measure cell #"+e:"Waiting for connection",this.clearMeasurementsDisplay()}resetReadingState(){this.stableCount=0,this.isReadingInProgress=!1,this.waitingForProbeRemoval=!1,this.prevVoltage=null,this.prevResistance=null,this.updateStabilityUI(0),this.currentReadings.length===0&&(this.stabilityText.textContent=this.isConnected?"Waiting for stable reading...":"Waiting for connection",this.readingNumberSpan.textContent="-")}updateMeasurementsDisplay(){const e=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;if(e>1){this.currentMeasurementsPanel.style.display="block",this.measurementsContainer.innerHTML="";for(let t=0;t<e;t++){const i=document.createElement("div");i.className="measurement-item bg-gray-50 dark:bg-gray-700 p-4 rounded-lg flex items-center justify-between";const n=this.currentReadings[t],s=!n;i.innerHTML=`
          <div class="flex items-center gap-4 flex-1">
            <span class="font-medium text-gray-700 dark:text-gray-300">Reading ${t+1}:</span>
            ${s?'<span class="text-gray-400 dark:text-gray-500 italic">Waiting...</span>':`<span class="text-gray-900 dark:text-white">
                Voltage: <strong>${n.voltage.toFixed(4)}V</strong> | 
                ACIR: <strong>${n.resistance.toFixed(4)} ${n.rUnit}</strong>
              </span>`}
          </div>
          ${s?"":`<button 
              class="delete-reading text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 font-bold text-xl px-3 py-1 rounded hover:bg-red-100 dark:hover:bg-red-900/30 transition-colors"
              data-index="${t}"
              title="Delete this reading"
            >✕</button>`}
        `,this.measurementsContainer.appendChild(i),s||i.querySelector(".delete-reading").addEventListener("click",()=>this.deleteMeasurement(t))}}else this.currentMeasurementsPanel.style.display="none"}clearMeasurementsDisplay(){this.measurementsContainer.innerHTML="",this.currentMeasurementsPanel.style.display="none"}deleteMeasurement(e){if(e<0||e>=this.currentReadings.length)return;this.currentReadings.splice(e,1),this.updateMeasurementsDisplay();const t=this.averagingCheckbox.checked?parseInt(this.numReadingsInput.value):1;this.readingCounterSpan.textContent=`Reading ${this.currentReadings.length} of ${t}`,this.currentReadings.length===0?this.stabilityText.textContent="Ready for next reading":this.stabilityText.textContent="Reading deleted. Ready for next reading",this.waitingForProbeRemoval=!1,this.isReadingInProgress=!1,this.stableCount=0,this.updateStabilityUI(0)}}if("serial"in navigator&&window.isSecureContext)new C;else{const y=window.isSecureContext?"WebSerial is not supported in this browser. Please use a Chromium-based browser (Chrome, Edge, Opera, Brave, etc).":"WebSerial requires a secure context (HTTPS or localhost).";h(y,"error"),document.querySelector(".container").innerHTML=`
        <header class="flex justify-between items-center py-6 px-6">
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Battery Logger for RC3563</h1>
        </header>
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow text-center">
            <h2 class="text-xl font-semibold text-red-600 dark:text-red-400 mb-4">WebSerial Not Supported</h2>
            <p class="text-gray-700 dark:text-gray-300">${y}</p>
        </div>
    `}
